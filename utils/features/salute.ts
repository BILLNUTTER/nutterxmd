import { WASocket, proto } from '@whiskeysockets/baileys';
import { FeatureHandler } from '../../shared/types';
import User from '../../models/User';
import UserSettings from '../../models/UserSettings';

const WATERMARK = '\n\n_‚û§ nutterxmd_'; // faint style watermark

const TRIGGER_WORDS = [
  'vibes', 'mtaani', 'cringe', 'lol', 'motive',
  'broke', 'mapenzi', 'umekula', 'kumwaga', 'siwezi',
  'heartbreak', 'lonely', 'silent', 'ghosted'
];

const JOKES: string[] = [
  'üòÇ Mtu akikuambia "uko single juu uko selective", mwambie hata takataka huchaguliwa üòÇ',
  'üß† Unajua kuna watu wanapenda sana kujua kuhusu maisha yako, si kwa msaada, ni kwa udaku üòÖ',
  'ü§£ Dem akikuambia ‚ÄúI‚Äôm not ready for a relationship‚Äù, ujue amekuchorea kama ramani ya Kenya üìç',
  'üö∂‚Äç‚ôÇÔ∏è Kuna watu ni kama file ya zip, ukifungua hakuna kitu ndani üò≠',
  'üï∫ Ukiwa broke unakuwa philosopher ‚Äì ‚ÄúI don‚Äôt believe in material things.‚Äù üòÜ',
  'üòπ Usijali ukikosea kwa life, hata Google huuliza "Did you mean...?"',
  'üíî Ata unajua heartbreak si mbaya sana... shida ni vile inakufanya uanze kuwatch motivational videos üò≠',
  'üìµ Kuna dem alisema "simu yangu ilikuwa silent", for 4 days? Ni phone ama ilikuwa meditation retreat? üòÜ',
  'üëÄ Acha kudanganya watu eti ‚Äúuko focused kwa goals‚Äù ‚Äì hakuna goal, ni loneliness tu üò≠',
  'üî• Ukiona mtu anakutext ‚ÄúUpo?‚Äù midnight, ujue hakuna mpango wa maisha, ni vibes tu üòÇ',
  'üòè Ukiona mtu anasema ‚ÄúI‚Äôm healing‚Äù kwa bio, ujue aliwekwa na akawekwa kando üî•',
  'ü•≤ Bro alibuy bouquet na dem akasema ‚ÄúAwww, thanks friend‚Äù... silent mode activated üò≠',
  'üò© Kuna watu walizaliwa "seen" ‚Äì ukiwatumia message, wanaitazama kama CV ya internship.',
];

function getRandomJoke(): string {
  const joke = JOKES[Math.floor(Math.random() * JOKES.length)];
  return `${joke}${WATERMARK}`;
}

function getMessageText(msg: proto.IWebMessageInfo): string {
  const message = msg.message;
  if (!message) return '';

  if (message.conversation) return message.conversation;
  if (message.extendedTextMessage?.text) return message.extendedTextMessage.text;
  if (message.ephemeralMessage?.message?.conversation)
    return message.ephemeralMessage.message.conversation;
  if (message.ephemeralMessage?.message?.extendedTextMessage?.text)
    return message.ephemeralMessage.message.extendedTextMessage.text;

  return '';
}

export const feature: FeatureHandler = {
  name: 'salute',

  enabled: () => true,

  handle: async (sock: WASocket, msg: proto.IWebMessageInfo) => {
    const sessionPhone = sock.user?.id?.split('@')[0];
    const sessionUser = await User.findOne({ phone: sessionPhone });

    if (!sessionUser) return;

    const settings = await UserSettings.findOne({ userId: sessionUser._id });
    const isEnabled = settings?.features?.salute === true;

    if (!isEnabled) {
      console.log('[salute] ‚õî Genz jokes is disabled for this user');
      return;
    }

    const text = getMessageText(msg).toLowerCase();
    if (!text) return;

    const containsTrigger = TRIGGER_WORDS.some(word => text.includes(word));
    if (!containsTrigger) {
      console.log('[salute] ‚è≠Ô∏è No trigger word found.');
      return;
    }

    const remoteJid = msg.key.remoteJid;
    if (!remoteJid) return;

    try {
      const joke = getRandomJoke();
      await sock.sendMessage(remoteJid, { text: joke }, { quoted: msg });
      console.log(`[salute] ‚úÖ Sent joke to ${remoteJid}`);
    } catch (err) {
      console.error(`[salute] ‚ùå Failed to send joke to ${remoteJid}:`, err);
    }
  },
};
